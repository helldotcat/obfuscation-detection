["entropy;generic", "entropy;names", "entropy;values", "node_pairs;ArrayExpression->ArrayExpression", "node_pairs;ArrayExpression->ArrowFunctionExpression", "node_pairs;ArrayExpression->AssignmentExpression", "node_pairs;ArrayExpression->AwaitExpression", "node_pairs;ArrayExpression->BinaryExpression", "node_pairs;ArrayExpression->CallExpression", "node_pairs;ArrayExpression->ConditionalExpression", "node_pairs;ArrayExpression->FunctionExpression", "node_pairs;ArrayExpression->Identifier", "node_pairs;ArrayExpression->Literal", "node_pairs;ArrayExpression->LogicalExpression", "node_pairs;ArrayExpression->MemberExpression", "node_pairs;ArrayExpression->NewExpression", "node_pairs;ArrayExpression->ObjectExpression", "node_pairs;ArrayExpression->SequenceExpression", "node_pairs;ArrayExpression->SpreadElement", "node_pairs;ArrayExpression->TaggedTemplateExpression", "node_pairs;ArrayExpression->TemplateLiteral", "node_pairs;ArrayExpression->ThisExpression", "node_pairs;ArrayExpression->UnaryExpression", "node_pairs;ArrayExpression->UpdateExpression", "node_pairs;ArrayExpression->YieldExpression", "node_pairs;ArrayPattern->ArrayPattern", "node_pairs;ArrayPattern->AssignmentPattern", "node_pairs;ArrayPattern->Identifier", "node_pairs;ArrayPattern->MemberExpression", "node_pairs;ArrayPattern->ObjectPattern", "node_pairs;ArrayPattern->RestElement", "node_pairs;ArrowFunctionExpression->ArrayExpression", "node_pairs;ArrowFunctionExpression->ArrayPattern", "node_pairs;ArrowFunctionExpression->ArrowFunctionExpression", "node_pairs;ArrowFunctionExpression->AssignmentExpression", "node_pairs;ArrowFunctionExpression->AssignmentPattern", "node_pairs;ArrowFunctionExpression->AwaitExpression", "node_pairs;ArrowFunctionExpression->BinaryExpression", "node_pairs;ArrowFunctionExpression->BlockStatement", "node_pairs;ArrowFunctionExpression->CallExpression", "node_pairs;ArrowFunctionExpression->ChainExpression", "node_pairs;ArrowFunctionExpression->ConditionalExpression", "node_pairs;ArrowFunctionExpression->FunctionExpression", "node_pairs;ArrowFunctionExpression->Identifier", "node_pairs;ArrowFunctionExpression->Literal", "node_pairs;ArrowFunctionExpression->LogicalExpression", "node_pairs;ArrowFunctionExpression->MemberExpression", "node_pairs;ArrowFunctionExpression->NewExpression", "node_pairs;ArrowFunctionExpression->ObjectExpression", "node_pairs;ArrowFunctionExpression->ObjectPattern", "node_pairs;ArrowFunctionExpression->RestElement", "node_pairs;ArrowFunctionExpression->SequenceExpression", "node_pairs;ArrowFunctionExpression->TaggedTemplateExpression", "node_pairs;ArrowFunctionExpression->TemplateLiteral", "node_pairs;ArrowFunctionExpression->UnaryExpression", "node_pairs;ArrowFunctionExpression->UpdateExpression", "node_pairs;AssignmentExpression->ArrayExpression", "node_pairs;AssignmentExpression->ArrayPattern", "node_pairs;AssignmentExpression->ArrowFunctionExpression", "node_pairs;AssignmentExpression->AssignmentExpression", "node_pairs;AssignmentExpression->AwaitExpression", "node_pairs;AssignmentExpression->BinaryExpression", "node_pairs;AssignmentExpression->CallExpression", "node_pairs;AssignmentExpression->ClassExpression", "node_pairs;AssignmentExpression->ConditionalExpression", "node_pairs;AssignmentExpression->FunctionExpression", "node_pairs;AssignmentExpression->Identifier", "node_pairs;AssignmentExpression->Literal", "node_pairs;AssignmentExpression->LogicalExpression", "node_pairs;AssignmentExpression->MemberExpression", "node_pairs;AssignmentExpression->NewExpression", "node_pairs;AssignmentExpression->ObjectExpression", "node_pairs;AssignmentExpression->ObjectPattern", "node_pairs;AssignmentExpression->SequenceExpression", "node_pairs;AssignmentExpression->TaggedTemplateExpression", "node_pairs;AssignmentExpression->TemplateLiteral", "node_pairs;AssignmentExpression->ThisExpression", "node_pairs;AssignmentExpression->UnaryExpression", "node_pairs;AssignmentExpression->UpdateExpression", "node_pairs;AssignmentExpression->YieldExpression", "node_pairs;AssignmentPattern->ArrayExpression", "node_pairs;AssignmentPattern->ArrayPattern", "node_pairs;AssignmentPattern->ArrowFunctionExpression", "node_pairs;AssignmentPattern->AssignmentExpression", "node_pairs;AssignmentPattern->BinaryExpression", "node_pairs;AssignmentPattern->CallExpression", "node_pairs;AssignmentPattern->ClassExpression", "node_pairs;AssignmentPattern->ConditionalExpression", "node_pairs;AssignmentPattern->FunctionExpression", "node_pairs;AssignmentPattern->Identifier", "node_pairs;AssignmentPattern->Literal", "node_pairs;AssignmentPattern->LogicalExpression", "node_pairs;AssignmentPattern->MemberExpression", "node_pairs;AssignmentPattern->NewExpression", "node_pairs;AssignmentPattern->ObjectExpression", "node_pairs;AssignmentPattern->ObjectPattern", "node_pairs;AssignmentPattern->TemplateLiteral", "node_pairs;AssignmentPattern->ThisExpression", "node_pairs;AssignmentPattern->UnaryExpression", "node_pairs;AssignmentPattern->UpdateExpression", "node_pairs;AwaitExpression->CallExpression", "node_pairs;AwaitExpression->Identifier", "node_pairs;AwaitExpression->ImportExpression", "node_pairs;AwaitExpression->MemberExpression", "node_pairs;AwaitExpression->NewExpression", "node_pairs;BinaryExpression->ArrayExpression", "node_pairs;BinaryExpression->AssignmentExpression", "node_pairs;BinaryExpression->AwaitExpression", "node_pairs;BinaryExpression->BinaryExpression", "node_pairs;BinaryExpression->CallExpression", "node_pairs;BinaryExpression->ChainExpression", "node_pairs;BinaryExpression->ConditionalExpression", "node_pairs;BinaryExpression->FunctionExpression", "node_pairs;BinaryExpression->Identifier", "node_pairs;BinaryExpression->Literal", "node_pairs;BinaryExpression->LogicalExpression", "node_pairs;BinaryExpression->MemberExpression", "node_pairs;BinaryExpression->MetaProperty", "node_pairs;BinaryExpression->NewExpression", "node_pairs;BinaryExpression->ObjectExpression", "node_pairs;BinaryExpression->SequenceExpression", "node_pairs;BinaryExpression->TemplateLiteral", "node_pairs;BinaryExpression->ThisExpression", "node_pairs;BinaryExpression->UnaryExpression", "node_pairs;BinaryExpression->UpdateExpression", "node_pairs;BlockStatement->BlockStatement", "node_pairs;BlockStatement->BreakStatement", "node_pairs;BlockStatement->ClassDeclaration", "node_pairs;BlockStatement->ContinueStatement", "node_pairs;BlockStatement->DebuggerStatement", "node_pairs;BlockStatement->DoWhileStatement", "node_pairs;BlockStatement->EmptyStatement", "node_pairs;BlockStatement->ExpressionStatement", "node_pairs;BlockStatement->ForInStatement", "node_pairs;BlockStatement->ForOfStatement", "node_pairs;BlockStatement->ForStatement", "node_pairs;BlockStatement->FunctionDeclaration", "node_pairs;BlockStatement->IfStatement", "node_pairs;BlockStatement->LabeledStatement", "node_pairs;BlockStatement->ReturnStatement", "node_pairs;BlockStatement->SwitchStatement", "node_pairs;BlockStatement->ThrowStatement", "node_pairs;BlockStatement->TryStatement", "node_pairs;BlockStatement->VariableDeclaration", "node_pairs;BlockStatement->WhileStatement", "node_pairs;BlockStatement->WithStatement", "node_pairs;BreakStatement->Identifier", "node_pairs;CallExpression->ArrayExpression", "node_pairs;CallExpression->ArrowFunctionExpression", "node_pairs;CallExpression->AssignmentExpression", "node_pairs;CallExpression->AwaitExpression", "node_pairs;CallExpression->BinaryExpression", "node_pairs;CallExpression->CallExpression", "node_pairs;CallExpression->ChainExpression", "node_pairs;CallExpression->ClassExpression", "node_pairs;CallExpression->ConditionalExpression", "node_pairs;CallExpression->FunctionExpression", "node_pairs;CallExpression->Identifier", "node_pairs;CallExpression->ImportExpression", "node_pairs;CallExpression->Literal", "node_pairs;CallExpression->LogicalExpression", "node_pairs;CallExpression->MemberExpression", "node_pairs;CallExpression->NewExpression", "node_pairs;CallExpression->ObjectExpression", "node_pairs;CallExpression->SequenceExpression", "node_pairs;CallExpression->SpreadElement", "node_pairs;CallExpression->Super", "node_pairs;CallExpression->TaggedTemplateExpression", "node_pairs;CallExpression->TemplateLiteral", "node_pairs;CallExpression->ThisExpression", "node_pairs;CallExpression->UnaryExpression", "node_pairs;CallExpression->UpdateExpression", "node_pairs;CallExpression->YieldExpression", "node_pairs;CatchClause->BlockStatement", "node_pairs;CatchClause->Identifier", "node_pairs;ChainExpression->CallExpression", "node_pairs;ChainExpression->MemberExpression", "node_pairs;ClassBody->MethodDefinition", "node_pairs;ClassDeclaration->ClassBody", "node_pairs;ClassDeclaration->FunctionExpression", "node_pairs;ClassDeclaration->Identifier", "node_pairs;ClassDeclaration->Literal", "node_pairs;ClassDeclaration->MemberExpression", "node_pairs;ClassExpression->ClassBody", "node_pairs;ClassExpression->Identifier", "node_pairs;ClassExpression->MemberExpression", "node_pairs;ConditionalExpression->ArrayExpression", "node_pairs;ConditionalExpression->ArrowFunctionExpression", "node_pairs;ConditionalExpression->AssignmentExpression", "node_pairs;ConditionalExpression->AwaitExpression", "node_pairs;ConditionalExpression->BinaryExpression", "node_pairs;ConditionalExpression->CallExpression", "node_pairs;ConditionalExpression->ConditionalExpression", "node_pairs;ConditionalExpression->FunctionExpression", "node_pairs;ConditionalExpression->Identifier", "node_pairs;ConditionalExpression->Literal", "node_pairs;ConditionalExpression->LogicalExpression", "node_pairs;ConditionalExpression->MemberExpression", "node_pairs;ConditionalExpression->MetaProperty", "node_pairs;ConditionalExpression->NewExpression", "node_pairs;ConditionalExpression->ObjectExpression", "node_pairs;ConditionalExpression->SequenceExpression", "node_pairs;ConditionalExpression->TaggedTemplateExpression", "node_pairs;ConditionalExpression->TemplateLiteral", "node_pairs;ConditionalExpression->ThisExpression", "node_pairs;ConditionalExpression->UnaryExpression", "node_pairs;ConditionalExpression->UpdateExpression", "node_pairs;ConditionalExpression->YieldExpression", "node_pairs;ContinueStatement->Identifier", "node_pairs;DoWhileStatement->AssignmentExpression", "node_pairs;DoWhileStatement->BinaryExpression", "node_pairs;DoWhileStatement->BlockStatement", "node_pairs;DoWhileStatement->CallExpression", "node_pairs;DoWhileStatement->ConditionalExpression", "node_pairs;DoWhileStatement->DoWhileStatement", "node_pairs;DoWhileStatement->EmptyStatement", "node_pairs;DoWhileStatement->ExpressionStatement", "node_pairs;DoWhileStatement->Identifier", "node_pairs;DoWhileStatement->IfStatement", "node_pairs;DoWhileStatement->Literal", "node_pairs;DoWhileStatement->LogicalExpression", "node_pairs;DoWhileStatement->MemberExpression", "node_pairs;DoWhileStatement->SequenceExpression", "node_pairs;DoWhileStatement->SwitchStatement", "node_pairs;DoWhileStatement->TryStatement", "node_pairs;DoWhileStatement->UnaryExpression", "node_pairs;DoWhileStatement->UpdateExpression", "node_pairs;DoWhileStatement->VariableDeclaration", "node_pairs;DoWhileStatement->WhileStatement", "node_pairs;ExportAllDeclaration->Identifier", "node_pairs;ExportAllDeclaration->Literal", "node_pairs;ExportDefaultDeclaration->ArrayExpression", "node_pairs;ExportDefaultDeclaration->ArrowFunctionExpression", "node_pairs;ExportDefaultDeclaration->AssignmentExpression", "node_pairs;ExportDefaultDeclaration->CallExpression", "node_pairs;ExportDefaultDeclaration->ClassDeclaration", "node_pairs;ExportDefaultDeclaration->ClassExpression", "node_pairs;ExportDefaultDeclaration->FunctionDeclaration", "node_pairs;ExportDefaultDeclaration->Identifier", "node_pairs;ExportDefaultDeclaration->Literal", "node_pairs;ExportDefaultDeclaration->MemberExpression", "node_pairs;ExportDefaultDeclaration->NewExpression", "node_pairs;ExportDefaultDeclaration->ObjectExpression", "node_pairs;ExportDefaultDeclaration->TaggedTemplateExpression", "node_pairs;ExportNamedDeclaration->ClassDeclaration", "node_pairs;ExportNamedDeclaration->ExportSpecifier", "node_pairs;ExportNamedDeclaration->FunctionDeclaration", "node_pairs;ExportNamedDeclaration->Literal", "node_pairs;ExportNamedDeclaration->VariableDeclaration", "node_pairs;ExportSpecifier->Identifier", "node_pairs;ExpressionStatement->ArrayExpression", "node_pairs;ExpressionStatement->ArrowFunctionExpression", "node_pairs;ExpressionStatement->AssignmentExpression", "node_pairs;ExpressionStatement->AwaitExpression", "node_pairs;ExpressionStatement->BinaryExpression", "node_pairs;ExpressionStatement->CallExpression", "node_pairs;ExpressionStatement->ChainExpression", "node_pairs;ExpressionStatement->ConditionalExpression", "node_pairs;ExpressionStatement->FunctionExpression", "node_pairs;ExpressionStatement->Identifier", "node_pairs;ExpressionStatement->ImportExpression", "node_pairs;ExpressionStatement->Literal", "node_pairs;ExpressionStatement->LogicalExpression", "node_pairs;ExpressionStatement->MemberExpression", "node_pairs;ExpressionStatement->NewExpression", "node_pairs;ExpressionStatement->ObjectExpression", "node_pairs;ExpressionStatement->SequenceExpression", "node_pairs;ExpressionStatement->TaggedTemplateExpression", "node_pairs;ExpressionStatement->TemplateLiteral", "node_pairs;ExpressionStatement->UnaryExpression", "node_pairs;ExpressionStatement->UpdateExpression", "node_pairs;ExpressionStatement->YieldExpression", "node_pairs;ForInStatement->ArrayExpression", "node_pairs;ForInStatement->AssignmentExpression", "node_pairs;ForInStatement->BlockStatement", "node_pairs;ForInStatement->BreakStatement", "node_pairs;ForInStatement->CallExpression", "node_pairs;ForInStatement->EmptyStatement", "node_pairs;ForInStatement->ExpressionStatement", "node_pairs;ForInStatement->ForInStatement", "node_pairs;ForInStatement->ForStatement", "node_pairs;ForInStatement->Identifier", "node_pairs;ForInStatement->IfStatement", "node_pairs;ForInStatement->Literal", "node_pairs;ForInStatement->LogicalExpression", "node_pairs;ForInStatement->MemberExpression", "node_pairs;ForInStatement->NewExpression", "node_pairs;ForInStatement->ObjectExpression", "node_pairs;ForInStatement->ReturnStatement", "node_pairs;ForInStatement->SequenceExpression", "node_pairs;ForInStatement->SwitchStatement", "node_pairs;ForInStatement->ThisExpression", "node_pairs;ForInStatement->TryStatement", "node_pairs;ForInStatement->UnaryExpression", "node_pairs;ForInStatement->VariableDeclaration", "node_pairs;ForOfStatement->ArrayExpression", "node_pairs;ForOfStatement->ArrayPattern", "node_pairs;ForOfStatement->AwaitExpression", "node_pairs;ForOfStatement->BlockStatement", "node_pairs;ForOfStatement->CallExpression", "node_pairs;ForOfStatement->ConditionalExpression", "node_pairs;ForOfStatement->ExpressionStatement", "node_pairs;ForOfStatement->ForOfStatement", "node_pairs;ForOfStatement->Identifier", "node_pairs;ForOfStatement->IfStatement", "node_pairs;ForOfStatement->LogicalExpression", "node_pairs;ForOfStatement->MemberExpression", "node_pairs;ForOfStatement->VariableDeclaration", "node_pairs;ForStatement->AssignmentExpression", "node_pairs;ForStatement->BinaryExpression", "node_pairs;ForStatement->BlockStatement", "node_pairs;ForStatement->CallExpression", "node_pairs;ForStatement->ConditionalExpression", "node_pairs;ForStatement->EmptyStatement", "node_pairs;ForStatement->ExpressionStatement", "node_pairs;ForStatement->ForInStatement", "node_pairs;ForStatement->ForStatement", "node_pairs;ForStatement->Identifier", "node_pairs;ForStatement->IfStatement", "node_pairs;ForStatement->Literal", "node_pairs;ForStatement->LogicalExpression", "node_pairs;ForStatement->MemberExpression", "node_pairs;ForStatement->ReturnStatement", "node_pairs;ForStatement->SequenceExpression", "node_pairs;ForStatement->SwitchStatement", "node_pairs;ForStatement->TryStatement", "node_pairs;ForStatement->UnaryExpression", "node_pairs;ForStatement->UpdateExpression", "node_pairs;ForStatement->VariableDeclaration", "node_pairs;FunctionDeclaration->ArrayPattern", "node_pairs;FunctionDeclaration->AssignmentPattern", "node_pairs;FunctionDeclaration->BlockStatement", "node_pairs;FunctionDeclaration->Identifier", "node_pairs;FunctionDeclaration->ObjectPattern", "node_pairs;FunctionDeclaration->RestElement", "node_pairs;FunctionExpression->ArrayPattern", "node_pairs;FunctionExpression->AssignmentPattern", "node_pairs;FunctionExpression->BlockStatement", "node_pairs;FunctionExpression->Identifier", "node_pairs;FunctionExpression->ObjectPattern", "node_pairs;FunctionExpression->RestElement", "node_pairs;IfStatement->AssignmentExpression", "node_pairs;IfStatement->AwaitExpression", "node_pairs;IfStatement->BinaryExpression", "node_pairs;IfStatement->BlockStatement", "node_pairs;IfStatement->BreakStatement", "node_pairs;IfStatement->CallExpression", "node_pairs;IfStatement->ChainExpression", "node_pairs;IfStatement->ConditionalExpression", "node_pairs;IfStatement->ContinueStatement", "node_pairs;IfStatement->DebuggerStatement", "node_pairs;IfStatement->DoWhileStatement", "node_pairs;IfStatement->EmptyStatement", "node_pairs;IfStatement->ExpressionStatement", "node_pairs;IfStatement->ForInStatement", "node_pairs;IfStatement->ForOfStatement", "node_pairs;IfStatement->ForStatement", "node_pairs;IfStatement->Identifier", "node_pairs;IfStatement->IfStatement", "node_pairs;IfStatement->LabeledStatement", "node_pairs;IfStatement->Literal", "node_pairs;IfStatement->LogicalExpression", "node_pairs;IfStatement->MemberExpression", "node_pairs;IfStatement->ReturnStatement", "node_pairs;IfStatement->SequenceExpression", "node_pairs;IfStatement->SwitchStatement", "node_pairs;IfStatement->ThrowStatement", "node_pairs;IfStatement->TryStatement", "node_pairs;IfStatement->UnaryExpression", "node_pairs;IfStatement->UpdateExpression", "node_pairs;IfStatement->VariableDeclaration", "node_pairs;IfStatement->WhileStatement", "node_pairs;IfStatement->YieldExpression", "node_pairs;ImportDeclaration->ImportDefaultSpecifier", "node_pairs;ImportDeclaration->ImportNamespaceSpecifier", "node_pairs;ImportDeclaration->ImportSpecifier", "node_pairs;ImportDeclaration->Literal", "node_pairs;ImportDefaultSpecifier->Identifier", "node_pairs;ImportExpression->BinaryExpression", "node_pairs;ImportExpression->CallExpression", "node_pairs;ImportExpression->Literal", "node_pairs;ImportNamespaceSpecifier->Identifier", "node_pairs;ImportSpecifier->Identifier", "node_pairs;LabeledStatement->BlockStatement", "node_pairs;LabeledStatement->DoWhileStatement", "node_pairs;LabeledStatement->ExpressionStatement", "node_pairs;LabeledStatement->ForInStatement", "node_pairs;LabeledStatement->ForOfStatement", "node_pairs;LabeledStatement->ForStatement", "node_pairs;LabeledStatement->Identifier", "node_pairs;LabeledStatement->IfStatement", "node_pairs;LabeledStatement->LabeledStatement", "node_pairs;LabeledStatement->SwitchStatement", "node_pairs;LabeledStatement->WhileStatement", "node_pairs;LogicalExpression->ArrayExpression", "node_pairs;LogicalExpression->ArrowFunctionExpression", "node_pairs;LogicalExpression->AssignmentExpression", "node_pairs;LogicalExpression->AwaitExpression", "node_pairs;LogicalExpression->BinaryExpression", "node_pairs;LogicalExpression->CallExpression", "node_pairs;LogicalExpression->ChainExpression", "node_pairs;LogicalExpression->ConditionalExpression", "node_pairs;LogicalExpression->FunctionExpression", "node_pairs;LogicalExpression->Identifier", "node_pairs;LogicalExpression->Literal", "node_pairs;LogicalExpression->LogicalExpression", "node_pairs;LogicalExpression->MemberExpression", "node_pairs;LogicalExpression->NewExpression", "node_pairs;LogicalExpression->ObjectExpression", "node_pairs;LogicalExpression->SequenceExpression", "node_pairs;LogicalExpression->TaggedTemplateExpression", "node_pairs;LogicalExpression->TemplateLiteral", "node_pairs;LogicalExpression->ThisExpression", "node_pairs;LogicalExpression->UnaryExpression", "node_pairs;LogicalExpression->UpdateExpression", "node_pairs;LogicalExpression->YieldExpression", "node_pairs;MemberExpression->ArrayExpression", "node_pairs;MemberExpression->AssignmentExpression", "node_pairs;MemberExpression->AwaitExpression", "node_pairs;MemberExpression->BinaryExpression", "node_pairs;MemberExpression->CallExpression", "node_pairs;MemberExpression->ConditionalExpression", "node_pairs;MemberExpression->FunctionExpression", "node_pairs;MemberExpression->Identifier", "node_pairs;MemberExpression->ImportExpression", "node_pairs;MemberExpression->Literal", "node_pairs;MemberExpression->LogicalExpression", "node_pairs;MemberExpression->MemberExpression", "node_pairs;MemberExpression->MetaProperty", "node_pairs;MemberExpression->NewExpression", "node_pairs;MemberExpression->ObjectExpression", "node_pairs;MemberExpression->SequenceExpression", "node_pairs;MemberExpression->Super", "node_pairs;MemberExpression->TemplateLiteral", "node_pairs;MemberExpression->ThisExpression", "node_pairs;MemberExpression->UnaryExpression", "node_pairs;MemberExpression->UpdateExpression", "node_pairs;MemberExpression->YieldExpression", "node_pairs;MetaProperty->Identifier", "node_pairs;MethodDefinition->AssignmentExpression", "node_pairs;MethodDefinition->CallExpression", "node_pairs;MethodDefinition->FunctionExpression", "node_pairs;MethodDefinition->Identifier", "node_pairs;MethodDefinition->Literal", "node_pairs;MethodDefinition->MemberExpression", "node_pairs;MethodDefinition->TemplateLiteral", "node_pairs;NewExpression->ArrayExpression", "node_pairs;NewExpression->ArrowFunctionExpression", "node_pairs;NewExpression->AssignmentExpression", "node_pairs;NewExpression->AwaitExpression", "node_pairs;NewExpression->BinaryExpression", "node_pairs;NewExpression->CallExpression", "node_pairs;NewExpression->ClassExpression", "node_pairs;NewExpression->ConditionalExpression", "node_pairs;NewExpression->FunctionExpression", "node_pairs;NewExpression->Identifier", "node_pairs;NewExpression->Literal", "node_pairs;NewExpression->LogicalExpression", "node_pairs;NewExpression->MemberExpression", "node_pairs;NewExpression->MetaProperty", "node_pairs;NewExpression->NewExpression", "node_pairs;NewExpression->ObjectExpression", "node_pairs;NewExpression->SpreadElement", "node_pairs;NewExpression->TemplateLiteral", "node_pairs;NewExpression->ThisExpression", "node_pairs;NewExpression->UnaryExpression", "node_pairs;NewExpression->UpdateExpression", "node_pairs;ObjectExpression->Property", "node_pairs;ObjectExpression->SpreadElement", "node_pairs;ObjectPattern->Property", "node_pairs;ObjectPattern->RestElement", "node_pairs;Program->BlockStatement", "node_pairs;Program->ClassDeclaration", "node_pairs;Program->DebuggerStatement", "node_pairs;Program->DoWhileStatement", "node_pairs;Program->EmptyStatement", "node_pairs;Program->ExportAllDeclaration", "node_pairs;Program->ExportDefaultDeclaration", "node_pairs;Program->ExportNamedDeclaration", "node_pairs;Program->ExpressionStatement", "node_pairs;Program->ForInStatement", "node_pairs;Program->ForOfStatement", "node_pairs;Program->ForStatement", "node_pairs;Program->FunctionDeclaration", "node_pairs;Program->IfStatement", "node_pairs;Program->ImportDeclaration", "node_pairs;Program->LabeledStatement", "node_pairs;Program->SwitchStatement", "node_pairs;Program->ThrowStatement", "node_pairs;Program->TryStatement", "node_pairs;Program->VariableDeclaration", "node_pairs;Program->WhileStatement", "node_pairs;Program->WithStatement", "node_pairs;Property->ArrayExpression", "node_pairs;Property->ArrayPattern", "node_pairs;Property->ArrowFunctionExpression", "node_pairs;Property->AssignmentExpression", "node_pairs;Property->AssignmentPattern", "node_pairs;Property->AwaitExpression", "node_pairs;Property->BinaryExpression", "node_pairs;Property->CallExpression", "node_pairs;Property->ChainExpression", "node_pairs;Property->ConditionalExpression", "node_pairs;Property->FunctionExpression", "node_pairs;Property->Identifier", "node_pairs;Property->Literal", "node_pairs;Property->LogicalExpression", "node_pairs;Property->MemberExpression", "node_pairs;Property->NewExpression", "node_pairs;Property->ObjectExpression", "node_pairs;Property->ObjectPattern", "node_pairs;Property->SequenceExpression", "node_pairs;Property->TaggedTemplateExpression", "node_pairs;Property->TemplateLiteral", "node_pairs;Property->ThisExpression", "node_pairs;Property->UnaryExpression", "node_pairs;Property->UpdateExpression", "node_pairs;Property->YieldExpression", "node_pairs;RestElement->ArrayPattern", "node_pairs;RestElement->Identifier", "node_pairs;RestElement->ObjectPattern", "node_pairs;ReturnStatement->ArrayExpression", "node_pairs;ReturnStatement->ArrowFunctionExpression", "node_pairs;ReturnStatement->AssignmentExpression", "node_pairs;ReturnStatement->AwaitExpression", "node_pairs;ReturnStatement->BinaryExpression", "node_pairs;ReturnStatement->CallExpression", "node_pairs;ReturnStatement->ChainExpression", "node_pairs;ReturnStatement->ClassExpression", "node_pairs;ReturnStatement->ConditionalExpression", "node_pairs;ReturnStatement->FunctionExpression", "node_pairs;ReturnStatement->Identifier", "node_pairs;ReturnStatement->Literal", "node_pairs;ReturnStatement->LogicalExpression", "node_pairs;ReturnStatement->MemberExpression", "node_pairs;ReturnStatement->MetaProperty", "node_pairs;ReturnStatement->NewExpression", "node_pairs;ReturnStatement->ObjectExpression", "node_pairs;ReturnStatement->SequenceExpression", "node_pairs;ReturnStatement->TaggedTemplateExpression", "node_pairs;ReturnStatement->TemplateLiteral", "node_pairs;ReturnStatement->ThisExpression", "node_pairs;ReturnStatement->UnaryExpression", "node_pairs;ReturnStatement->UpdateExpression", "node_pairs;ReturnStatement->YieldExpression", "node_pairs;SequenceExpression->ArrayExpression", "node_pairs;SequenceExpression->ArrowFunctionExpression", "node_pairs;SequenceExpression->AssignmentExpression", "node_pairs;SequenceExpression->AwaitExpression", "node_pairs;SequenceExpression->BinaryExpression", "node_pairs;SequenceExpression->CallExpression", "node_pairs;SequenceExpression->ClassExpression", "node_pairs;SequenceExpression->ConditionalExpression", "node_pairs;SequenceExpression->FunctionExpression", "node_pairs;SequenceExpression->Identifier", "node_pairs;SequenceExpression->Literal", "node_pairs;SequenceExpression->LogicalExpression", "node_pairs;SequenceExpression->MemberExpression", "node_pairs;SequenceExpression->NewExpression", "node_pairs;SequenceExpression->ObjectExpression", "node_pairs;SequenceExpression->SequenceExpression", "node_pairs;SequenceExpression->TemplateLiteral", "node_pairs;SequenceExpression->ThisExpression", "node_pairs;SequenceExpression->UnaryExpression", "node_pairs;SequenceExpression->UpdateExpression", "node_pairs;SequenceExpression->YieldExpression", "node_pairs;SpreadElement->ArrayExpression", "node_pairs;SpreadElement->AssignmentExpression", "node_pairs;SpreadElement->AwaitExpression", "node_pairs;SpreadElement->BinaryExpression", "node_pairs;SpreadElement->CallExpression", "node_pairs;SpreadElement->ConditionalExpression", "node_pairs;SpreadElement->Identifier", "node_pairs;SpreadElement->LogicalExpression", "node_pairs;SpreadElement->MemberExpression", "node_pairs;SpreadElement->NewExpression", "node_pairs;SpreadElement->ObjectExpression", "node_pairs;SwitchCase->AssignmentExpression", "node_pairs;SwitchCase->BinaryExpression", "node_pairs;SwitchCase->BlockStatement", "node_pairs;SwitchCase->BreakStatement", "node_pairs;SwitchCase->CallExpression", "node_pairs;SwitchCase->ConditionalExpression", "node_pairs;SwitchCase->ContinueStatement", "node_pairs;SwitchCase->DebuggerStatement", "node_pairs;SwitchCase->DoWhileStatement", "node_pairs;SwitchCase->EmptyStatement", "node_pairs;SwitchCase->ExpressionStatement", "node_pairs;SwitchCase->ForInStatement", "node_pairs;SwitchCase->ForOfStatement", "node_pairs;SwitchCase->ForStatement", "node_pairs;SwitchCase->FunctionDeclaration", "node_pairs;SwitchCase->Identifier", "node_pairs;SwitchCase->IfStatement", "node_pairs;SwitchCase->LabeledStatement", "node_pairs;SwitchCase->Literal", "node_pairs;SwitchCase->LogicalExpression", "node_pairs;SwitchCase->MemberExpression", "node_pairs;SwitchCase->ReturnStatement", "node_pairs;SwitchCase->SequenceExpression", "node_pairs;SwitchCase->SwitchStatement", "node_pairs;SwitchCase->TemplateLiteral", "node_pairs;SwitchCase->ThisExpression", "node_pairs;SwitchCase->ThrowStatement", "node_pairs;SwitchCase->TryStatement", "node_pairs;SwitchCase->UnaryExpression", "node_pairs;SwitchCase->UpdateExpression", "node_pairs;SwitchCase->VariableDeclaration", "node_pairs;SwitchCase->WhileStatement", "node_pairs;SwitchStatement->AssignmentExpression", "node_pairs;SwitchStatement->BinaryExpression", "node_pairs;SwitchStatement->CallExpression", "node_pairs;SwitchStatement->ConditionalExpression", "node_pairs;SwitchStatement->Identifier", "node_pairs;SwitchStatement->Literal", "node_pairs;SwitchStatement->LogicalExpression", "node_pairs;SwitchStatement->MemberExpression", "node_pairs;SwitchStatement->SequenceExpression", "node_pairs;SwitchStatement->SwitchCase", "node_pairs;SwitchStatement->UnaryExpression", "node_pairs;SwitchStatement->UpdateExpression", "node_pairs;TaggedTemplateExpression->CallExpression", "node_pairs;TaggedTemplateExpression->Identifier", "node_pairs;TaggedTemplateExpression->MemberExpression", "node_pairs;TaggedTemplateExpression->SequenceExpression", "node_pairs;TaggedTemplateExpression->TemplateLiteral", "node_pairs;TemplateLiteral->ArrowFunctionExpression", "node_pairs;TemplateLiteral->BinaryExpression", "node_pairs;TemplateLiteral->CallExpression", "node_pairs;TemplateLiteral->ChainExpression", "node_pairs;TemplateLiteral->ConditionalExpression", "node_pairs;TemplateLiteral->Identifier", "node_pairs;TemplateLiteral->Literal", "node_pairs;TemplateLiteral->LogicalExpression", "node_pairs;TemplateLiteral->MemberExpression", "node_pairs;TemplateLiteral->NewExpression", "node_pairs;TemplateLiteral->SequenceExpression", "node_pairs;TemplateLiteral->TemplateElement", "node_pairs;TemplateLiteral->TemplateLiteral", "node_pairs;TemplateLiteral->UnaryExpression", "node_pairs;TemplateLiteral->UpdateExpression", "node_pairs;ThrowStatement->ArrayExpression", "node_pairs;ThrowStatement->BinaryExpression", "node_pairs;ThrowStatement->CallExpression", "node_pairs;ThrowStatement->ConditionalExpression", "node_pairs;ThrowStatement->Identifier", "node_pairs;ThrowStatement->Literal", "node_pairs;ThrowStatement->LogicalExpression", "node_pairs;ThrowStatement->MemberExpression", "node_pairs;ThrowStatement->NewExpression", "node_pairs;ThrowStatement->ObjectExpression", "node_pairs;ThrowStatement->SequenceExpression", "node_pairs;ThrowStatement->ThisExpression", "node_pairs;ThrowStatement->UnaryExpression", "node_pairs;TryStatement->BlockStatement", "node_pairs;TryStatement->CatchClause", "node_pairs;UnaryExpression->ArrayExpression", "node_pairs;UnaryExpression->AssignmentExpression", "node_pairs;UnaryExpression->AwaitExpression", "node_pairs;UnaryExpression->BinaryExpression", "node_pairs;UnaryExpression->CallExpression", "node_pairs;UnaryExpression->ChainExpression", "node_pairs;UnaryExpression->ConditionalExpression", "node_pairs;UnaryExpression->FunctionExpression", "node_pairs;UnaryExpression->Identifier", "node_pairs;UnaryExpression->Literal", "node_pairs;UnaryExpression->LogicalExpression", "node_pairs;UnaryExpression->MemberExpression", "node_pairs;UnaryExpression->MetaProperty", "node_pairs;UnaryExpression->NewExpression", "node_pairs;UnaryExpression->SequenceExpression", "node_pairs;UnaryExpression->ThisExpression", "node_pairs;UnaryExpression->UnaryExpression", "node_pairs;UnaryExpression->UpdateExpression", "node_pairs;UnaryExpression->YieldExpression", "node_pairs;UpdateExpression->Identifier", "node_pairs;UpdateExpression->MemberExpression", "node_pairs;VariableDeclaration->VariableDeclarator", "node_pairs;VariableDeclarator->ArrayExpression", "node_pairs;VariableDeclarator->ArrayPattern", "node_pairs;VariableDeclarator->ArrowFunctionExpression", "node_pairs;VariableDeclarator->AssignmentExpression", "node_pairs;VariableDeclarator->AwaitExpression", "node_pairs;VariableDeclarator->BinaryExpression", "node_pairs;VariableDeclarator->CallExpression", "node_pairs;VariableDeclarator->ChainExpression", "node_pairs;VariableDeclarator->ClassExpression", "node_pairs;VariableDeclarator->ConditionalExpression", "node_pairs;VariableDeclarator->FunctionExpression", "node_pairs;VariableDeclarator->Identifier", "node_pairs;VariableDeclarator->ImportExpression", "node_pairs;VariableDeclarator->Literal", "node_pairs;VariableDeclarator->LogicalExpression", "node_pairs;VariableDeclarator->MemberExpression", "node_pairs;VariableDeclarator->NewExpression", "node_pairs;VariableDeclarator->ObjectExpression", "node_pairs;VariableDeclarator->ObjectPattern", "node_pairs;VariableDeclarator->SequenceExpression", "node_pairs;VariableDeclarator->TaggedTemplateExpression", "node_pairs;VariableDeclarator->TemplateLiteral", "node_pairs;VariableDeclarator->ThisExpression", "node_pairs;VariableDeclarator->UnaryExpression", "node_pairs;VariableDeclarator->UpdateExpression", "node_pairs;VariableDeclarator->YieldExpression", "node_pairs;WhileStatement->AssignmentExpression", "node_pairs;WhileStatement->BinaryExpression", "node_pairs;WhileStatement->BlockStatement", "node_pairs;WhileStatement->CallExpression", "node_pairs;WhileStatement->ConditionalExpression", "node_pairs;WhileStatement->ContinueStatement", "node_pairs;WhileStatement->EmptyStatement", "node_pairs;WhileStatement->ExpressionStatement", "node_pairs;WhileStatement->Identifier", "node_pairs;WhileStatement->IfStatement", "node_pairs;WhileStatement->Literal", "node_pairs;WhileStatement->LogicalExpression", "node_pairs;WhileStatement->MemberExpression", "node_pairs;WhileStatement->ReturnStatement", "node_pairs;WhileStatement->SequenceExpression", "node_pairs;WhileStatement->SwitchStatement", "node_pairs;WhileStatement->TryStatement", "node_pairs;WhileStatement->UnaryExpression", "node_pairs;WhileStatement->UpdateExpression", "node_pairs;WhileStatement->WhileStatement", "node_pairs;WithStatement->BlockStatement", "node_pairs;WithStatement->ExpressionStatement", "node_pairs;WithStatement->Identifier", "node_pairs;WithStatement->ObjectExpression", "node_pairs;YieldExpression->ArrayExpression", "node_pairs;YieldExpression->BinaryExpression", "node_pairs;YieldExpression->CallExpression", "node_pairs;YieldExpression->Identifier", "node_pairs;YieldExpression->Literal", "node_pairs;YieldExpression->MemberExpression", "node_pairs;YieldExpression->NewExpression", "node_pairs;YieldExpression->ObjectExpression", "node_pairs;YieldExpression->UpdateExpression", "node_pairs;YieldExpression->YieldExpression", "nodes;ArrayExpression", "nodes;ArrayPattern", "nodes;ArrowFunctionExpression", "nodes;AssignmentExpression", "nodes;AssignmentPattern", "nodes;AwaitExpression", "nodes;BinaryExpression", "nodes;BlockStatement", "nodes;BreakStatement", "nodes;CallExpression", "nodes;CatchClause", "nodes;ChainExpression", "nodes;ClassBody", "nodes;ClassDeclaration", "nodes;ClassExpression", "nodes;ConditionalExpression", "nodes;ContinueStatement", "nodes;DebuggerStatement", "nodes;DoWhileStatement", "nodes;EmptyStatement", "nodes;ExportAllDeclaration", "nodes;ExportDefaultDeclaration", "nodes;ExportNamedDeclaration", "nodes;ExportSpecifier", "nodes;ExpressionStatement", "nodes;ForInStatement", "nodes;ForOfStatement", "nodes;ForStatement", "nodes;FunctionDeclaration", "nodes;FunctionExpression", "nodes;Identifier", "nodes;IfStatement", "nodes;ImportDeclaration", "nodes;ImportDefaultSpecifier", "nodes;ImportExpression", "nodes;ImportNamespaceSpecifier", "nodes;ImportSpecifier", "nodes;LabeledStatement", "nodes;Literal", "nodes;LogicalExpression", "nodes;MemberExpression", "nodes;MetaProperty", "nodes;MethodDefinition", "nodes;NewExpression", "nodes;ObjectExpression", "nodes;ObjectPattern", "nodes;Program", "nodes;Property", "nodes;RestElement", "nodes;ReturnStatement", "nodes;SequenceExpression", "nodes;SpreadElement", "nodes;Super", "nodes;SwitchCase", "nodes;SwitchStatement", "nodes;TaggedTemplateExpression", "nodes;TemplateElement", "nodes;TemplateLiteral", "nodes;ThisExpression", "nodes;ThrowStatement", "nodes;TryStatement", "nodes;UnaryExpression", "nodes;UpdateExpression", "nodes;VariableDeclaration", "nodes;VariableDeclarator", "nodes;WhileStatement", "nodes;WithStatement", "nodes;YieldExpression", "ratios;chars_another", "ratios;chars_ascii_letters", "ratios;chars_ascii_lowercase", "ratios;chars_ascii_uppercase", "ratios;chars_backslash", "ratios;chars_digits", "ratios;chars_names_another", "ratios;chars_names_ascii_letters", "ratios;chars_names_ascii_lowercase", "ratios;chars_names_ascii_uppercase", "ratios;chars_names_backslash", "ratios;chars_names_digits", "ratios;chars_names_newlines", "ratios;chars_names_whitespaces", "ratios;chars_newlines", "ratios;chars_values_another", "ratios;chars_values_ascii_letters", "ratios;chars_values_ascii_lowercase", "ratios;chars_values_ascii_uppercase", "ratios;chars_values_backslash", "ratios;chars_values_digits", "ratios;chars_values_newlines", "ratios;chars_values_whitespaces", "ratios;chars_whitespaces", "ratios;keywords_else", "ratios;keywords_finally", "ratios;names_quantile_0", "ratios;names_quantile_10", "ratios;names_quantile_100", "ratios;names_quantile_15", "ratios;names_quantile_20", "ratios;names_quantile_25", "ratios;names_quantile_30", "ratios;names_quantile_35", "ratios;names_quantile_40", "ratios;names_quantile_45", "ratios;names_quantile_5", "ratios;names_quantile_50", "ratios;names_quantile_55", "ratios;names_quantile_60", "ratios;names_quantile_65", "ratios;names_quantile_70", "ratios;names_quantile_75", "ratios;names_quantile_80", "ratios;names_quantile_85", "ratios;names_quantile_90", "ratios;names_quantile_95", "ratios;operators_instanceof", "ratios;operators_typeof", "ratios;raw_null", "ratios;reserved_names_charAt", "ratios;reserved_names_charCodeAt", "ratios;reserved_names_escape", "ratios;reserved_names_eval", "ratios;reserved_names_fromCharCode", "ratios;reserved_names_indexOf", "ratios;reserved_names_toString", "ratios;reserved_names_undefined", "ratios;reserved_names_unescape", "ratios;reserved_names_valueOf", "ratios;values_false", "ratios;values_newlines", "ratios;values_numeric", "ratios;values_quantile_0", "ratios;values_quantile_10", "ratios;values_quantile_100", "ratios;values_quantile_15", "ratios;values_quantile_20", "ratios;values_quantile_25", "ratios;values_quantile_30", "ratios;values_quantile_35", "ratios;values_quantile_40", "ratios;values_quantile_45", "ratios;values_quantile_5", "ratios;values_quantile_50", "ratios;values_quantile_55", "ratios;values_quantile_60", "ratios;values_quantile_65", "ratios;values_quantile_70", "ratios;values_quantile_75", "ratios;values_quantile_80", "ratios;values_quantile_85", "ratios;values_quantile_90", "ratios;values_quantile_95", "ratios;values_string", "ratios;values_true", "v_types", "e_types"]